/*******************************************************************************
 * AltTechTree generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AltTechTree extends XGTechTree
    config(AltTree)
    hidecategories(Navigation,Navigation,Navigation,Navigation,Navigation);

struct native TAltTechBalance
{
    var XComGame.XGGameData.ETechType eTech;
    var int iTime;
    var int iAlloys;
    var int iElerium;
    var int iNumFragments;
    var int iNumItems;

    structdefaultproperties
    {
        eTech=ETechType.eTech_None
        iTime=0
        iAlloys=0
        iElerium=0
        iNumFragments=0
        iNumItems=0
    }
};

struct TAltFoundryBalance
{
    var XComGame.XGGameData.EFoundryTech eFTech;
    var int iTime;
    var int iEngineers;
    var int iCash;
    var int iAlloys;
    var int iElerium;
    var int iFragments;
    var int iNumItems;
    var XComGame.XGGameData.EItemType eReqItem;
    var XComGame.XGGameData.ETechType eReqTech;

    structdefaultproperties
    {
        eFTech=EFoundryTech.eFoundry_None
        iTime=0
        iEngineers=0
        iCash=0
        iAlloys=0
        iElerium=0
        iFragments=0
        iNumItems=0
        eReqItem=EItemType.eItem_NONE
        eReqTech=ETechType.eTech_None
    }
};

struct TGeneMods
{
    var int iFatigue;
    var int iInjury;

    structdefaultproperties
    {
        iFatigue=0
        iInjury=0
    }
};

var bool bTechAdjust;
var const localized string altTechTypeNames[76];
var const localized string altTechTypeSummary[76];
var const localized string altTechTypeReport[76];
var const localized string altTechTypeCodeName[76];
var const localized string altTechTypeResults[76];
var const localized string FoundryTechNames[60];
var const localized string FoundryTechSummary[60];
var config array<config TAltTechBalance> altTechBalance;
var config array<config TAltFoundryBalance> altFoundryBalance;
var config array<config TGeneMods> geneMods;
var int notfun;

function Init()
{
    LogInternal("This is 2");
    BuildAltTechs();
    BuildAltFoundryTechs();
    BuildOTSTechs();
    BuildObjectives();
    BuildResearchCredits();
    BuildGeneTechs();
    //return;    
}

function XGTechTree TECHTREE()
{
    LogInternal("This Is Alright");
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().GetLabs().m_kTree;
    //return ReturnValue;    
}

function XGFacility_Labs LABS()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().m_kLabs;
    //return ReturnValue;    
}

function XGFacility_Engineering ENGINEERING()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().m_kEngineering;
    //return ReturnValue;    
}

function XGStorage STORAGE()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().m_kEngineering.GetStorage();
    //return ReturnValue;    
}

function XGTacticalGameCore theGameCore()
{
    return XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore;
    //return ReturnValue;    
}

function bool IsOptionEnabled(XComGame.XGGameData.EGameplayOption eOption)
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().m_arrSecondWave[eOption] > 0;
    //return ReturnValue;    
}

function TTech TECH(int iTechType)
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().GetLabs().m_kTree.GetTech(iTechType);
    //return ReturnValue;    
}

function XGGeoscape GEOSCAPE()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetGeoscape();
    //return ReturnValue;    
}

function BuildAltTechs()
{
    LogInternal("This Is Tech");
    m_arrTechs.Add(76);
    BuildTech(1, 1, true, 134,, 42);
    BuildTech(2, 1, false, 134, 1, 3);
    BuildTech(3, 1, true, 183, 4, 10);
    BuildTech(4, 1, true, 164, 1, 26);
    BuildTech(5, 1, true, 170, 12, 17);
    BuildTech(6, 1, true, 135, 13, 65);
    BuildTech(7, 1, false, 171, 2, 21);
    BuildTech(8, 1, false, 180, 43, 35);
    BuildTech(9, 1, false,,, 0);
    BuildTech(10, 1, false, 164,, 1);
    BuildTech(12, 1, false,, 10, 14);
    BuildTech(13, 1, false, 164, 1, 68);
    BuildTech(14, 1, true, 164, 3, 9);
    BuildTech(15, 1, true,, 72, 5);
    BuildTech(18, 1, true,, 7, 6);
    BuildTech(19, 1, true,, 5, 4);
    BuildTech(24, 1, true, 42, 9, 30);
    BuildTech(25, 1, false, 45, 24, 32);
    BuildTech(28, 1, true,, 10, 33);
    BuildTech(30, 1, true, 179, 26, 18);
    BuildTech(31, 1, true,, 23, 33);
    BuildTech(32, 1, false, 168,, 39);
    BuildTech(33, 1, true, 170, 12, 40);
    BuildTech(34, 1, false,, 22, 15);
    BuildTech(35, 1, false, 150, 44, 43, 6);
    BuildTech(36, 1, false, 152, 45, 44, 4);
    BuildTech(37, 1, false, 155, 47, 45, 7);
    BuildTech(38, 1, false, 151, 6, 51, 8);
    BuildTech(39, 1, false, 157, 51, 48, 5);
    BuildTech(40, 1, false, 154, 46, 46, 1);
    BuildTech(41, 1, false, 153, 52, 50, 2);
    BuildTech(42, 1, false, 156, 53, 49, 3);
    BuildTech(43, 1, false, 158, 56, 47, 9);
    BuildTech(44, 1, false, 134, 1, 52);
    BuildTech(45, 1, false, 136, 11, 53);
    BuildTech(46, 1, false, 138, 1, 55);
    BuildTech(47, 1, false, 139, 1, 54);
    BuildTech(48, 1, false, 144, 13, 56);
    BuildTech(49, 1, true,, 22, 37);
    BuildTech(50, 1, false, 142, 11, 59);
    BuildTech(51, 1, true, 141, 2, 62);
    BuildTech(52, 1, true, 137, 45, 64);
    BuildTech(53, 1, false, 140, 47, 63);
    BuildTech(54, 1, false, 147, 10, 60);
    BuildTech(55, 1, false, 146, 32, 61);
    BuildTech(56, 1, false, 143, 4, 58);
    BuildTech(57, 1, true, 187, 44, 66);
    BuildTech(58, 1, false, 188, 32, 67);
    BuildTech(59, 1, true,, 3, 36);
    BuildTech(60, 1, true, 164, 11, 66);
    BuildTech(61, 1, true,, 10, 41);
    BuildTech(62, 1, true,, 10, 41);
    BuildTech(63, 1, true,, 10, 41);
    BuildTech(64, 1, true,, 10, 41);
    BuildTech(65, 1, true,, 10, 41);
    BuildTech(66, 1, true,, 10, 41);
    BuildTech(67, 1, true,, 10, 41);
    BuildTech(68, 1, true,, 10, 41);
    BuildTech(69, 1, true,, 10, 41);
    BuildTech(70, 1, true,, 10, 41);
    BuildTech(71, 1, true,, 10, 41);
    BuildTech(72, 1, false,, 10, 5);
    BalanceTechs();
    BuildAltTech(11, 1, true,, 10, 16);
    BuildAltTech(16, 1, true,, 12, 7);
    BuildAltTech(17, 1, true, 170, 11, 8);
    BuildAltTech(20, 1, true,, 9, 23);
    BuildAltTech(21, 1, true,, 20, 24);
    BuildAltTech(22, 1, true, 242, 20, 22);
    BuildAltTech(23, 1, true, 147, 9, 31);
    BuildAltTech(26, 1, true, 188, 10, 29);
    BuildAltTech(27, 1, true,, 9, 34);
    BuildAltTech(29, 1, true, 16, 30, 28);
    BuildAltTech(73, 1, true, 164, 48, 66);
    BuildAltTech(74, 1, true, 164, 17, 66);
    BuildAltTech(75, 1, true, 164, 17, 66);
    BalanceAltTechs();
    //return;    
}

function BuildAltFoundryTechs()
{
    LogInternal("This is Foundry");
    m_arrFoundryTechs.Add(60);
    BuildFoundryTech(1, 0, 0,,,,,, 12);
    BuildFoundryTech(2, 0, 0,,,,,, 9);
    BuildFoundryTech(3, 0, 0,,,,,, 3);
    BuildFoundryTech(4, 0, 0,,,,,, 4);
    BuildFoundryTech(5, 0, 0,,,,,, 11);
    BuildFoundryTech(6, 0, 0,,,,,, 6);
    BuildFoundryTech(7, 0, 0,,,,,, 7);
    BuildFoundryTech(8, 0, 0,,,,,, 1);
    BuildFoundryTech(9, 0, 0,,,,,, 2);
    BuildFoundryTech(10, 0, 0,,,,,, 5);
    BuildFoundryTech(11, 0, 0,,,,,, 8);
    BuildFoundryTech(12, 0, 0,,,,,, 11);
    BuildFoundryTech(13, 0, 0,,,,,, 12);
    BuildFoundryTech(14, 0, 0,,,,,, 13);
    BuildFoundryTech(15, 0, 0,,,,,, 14);
    BuildFoundryTech(16, 0, 0,,,,,, 15);
    BuildFoundryTech(17, 0, 0,,,,,, 16);
    BuildFoundryTech(18, 0, 0,,,,,, 17);
    BuildFoundryTech(19, 0, 0,,,,,, 20);
    BuildFoundryTech(20, 0, 0,,,,,, 23);
    BuildFoundryTech(21, 0, 0,,,,,, 18);
    BuildFoundryTech(22, 0, 0,,,,,, 19);
    BuildFoundryTech(23, 0, 0,,,,,, 21);
    BuildFoundryTech(24, 0, 0,,,,,, 22);
    BuildFoundryTech(25, 0, 0,,,,,, 4);
    BuildFoundryTech(26, 0, 0,,,,,, 11);
    BuildFoundryTech(27, 0, 0,,,,,, 11);
    BuildFoundryTech(28, 0, 0,,,,,, 11);
    BuildFoundryTech(29, 0, 0,,,,,, 21);
    BuildFoundryTech(30, 0, 0,,,,,, 3);
    BuildFoundryTech(31, 0, 0,,,,,, 11);
    BuildFoundryTech(32, 0, 0,,,,,, 11);
    BuildFoundryTech(33, 0, 0,,,,,, 20);
    BuildFoundryTech(34, 0, 0,,,,,, 6);
    BuildFoundryTech(35, 0, 0,,,,,, 16);
    BuildFoundryTech(36, 0, 0,,,,,, 18);
    BuildFoundryTech(37, 0, 0,,,,,, 11);
    BuildFoundryTech(38, 0, 0,,,,,, 20);
    BuildFoundryTech(39, 0, 0,,,,,, 4);
    BuildFoundryTech(40, 0, 0,,,,,, 17);
    BuildFoundryTech(41, 0, 0,,,,,, 19);
    BuildFoundryTech(42, 0, 0,,,,,, 17);
    BuildFoundryTech(43, 0, 0,,,,,, 19);
    BuildFoundryTech(44, 0, 0,,,,,, 19);
    BuildFoundryTech(45, 0, 0,,,,,, 19);
    BuildFoundryTech(46, 0, 0,,,,,, 19);
    BalanceFoundry();
    BuildAltFoundryTech(47, 0, 0,,,,,, 19);
    BuildAltFoundryTech(48, 0, 0,,,,,, 19);
    BuildAltFoundryTech(49, 0, 0,,,,,, 19);
    BuildAltFoundryTech(50, 0, 0,,,,,, 19);
    BuildAltFoundryTech(51, 0, 0,,,,,, 19);
    BuildAltFoundryTech(52, 0, 0,,,,,, 19);
    BuildAltFoundryTech(53, 0, 0,,,,,, 19);
    BuildAltFoundryTech(54, 0, 0,,,,,, 19);
    BuildAltFoundryTech(55, 0, 0,,,,,, 19);
    BuildAltFoundryTech(56, 0, 0,,,,,, 19);
    BuildAltFoundryTech(57, 0, 0,,,,,, 19);
    BuildAltFoundryTech(58, 0, 0,,,,,, 19);
    BalanceAltFoundry();
    //return;    
}

function string GetAltBriefSummary(int iTech, out string strReport, out string strCustomResults, out TResearchCost kCost, out string strCodename)
{
    LogInternal("altTechTypeCodeName=" $ altTechTypeCodeName[iTech]);
    LogInternal("altTechTypeResults=" $ altTechTypeResults[iTech]);
    LogInternal("altTechTypeReport=" $ altTechTypeReport[iTech]);
    LogInternal("altTechTypeSummary=" $ altTechTypeSummary[iTech]);
    strCodename = altTechTypeCodeName[iTech];
    strCustomResults = altTechTypeResults[iTech];
    strReport = class'XComLocalizer'.static.ExpandString(altTechTypeReport[iTech]);
    return altTechTypeSummary[iTech];
    //return ReturnValue;    
}

function BalanceAltTechs()
{
    local int iBalanceTech;
    local TAltTechBalance kBalance;
    local int iItems;

    iBalanceTech = 0;
    J0x0B:
    LogInternal("altTechBalance.Length=" $ string(altTechBalance.Length));
    // End:0x714
    if(iBalanceTech < altTechBalance.Length)
    {
        LogInternal("iBalanceTech=" $ string(iBalanceTech));
        LogInternal("altTechBalance.Length=" $ string(altTechBalance.Length));
        kBalance = altTechBalance[iBalanceTech];
        // End:0x706
        if(kBalance.eTech != 0)
        {
            LogInternal("kBalance.eTech=" $ string(kBalance.eTech));
            m_arrTechs[kBalance.eTech].iHours = TechCost(kBalance.iTime);
            m_arrTechs[kBalance.eTech].kCost.iElerium = kBalance.iElerium;
            m_arrTechs[kBalance.eTech].kCost.iAlloys = kBalance.iAlloys;
            // End:0x2BA
            if(kBalance.iNumFragments > 0)
            {
                m_arrTechs[kBalance.eTech].kCost.arrItems.AddItem(163);
            }
            // End:0x388
            if(m_arrTechs[kBalance.eTech].iItemReq > 0)
            {
                m_arrTechs[kBalance.eTech].kCost.arrItems.AddItem(m_arrTechs[kBalance.eTech].iItemReq);
            }
            LogInternal("arrItems.Length=" $ string(m_arrTechs[kBalance.eTech].kCost.arrItems.Length));
            iItems = 0;
            J0x3FB:
            // End:0x706 [Loop If]
            if(iItems < m_arrTechs[kBalance.eTech].kCost.arrItems.Length)
            {
                LogInternal("arrItems.Length2=" $ string(m_arrTechs[kBalance.eTech].kCost.arrItems.Length));
                // End:0x5A2
                if(m_arrTechs[kBalance.eTech].kCost.arrItems[iItems] == 163)
                {
                    m_arrTechs[kBalance.eTech].kCost.arrItemQuantities[iItems] = WFragment(kBalance.iNumFragments);
                }
                // End:0x6F8
                else
                {
                    // End:0x679
                    if(m_arrTechs[kBalance.eTech].kCost.arrItems[iItems] == 164)
                    {
                        m_arrTechs[kBalance.eTech].kCost.arrItemQuantities[iItems] = kBalance.iNumItems;
                    }
                    // End:0x6F8
                    else
                    {
                        m_arrTechs[kBalance.eTech].kCost.arrItemQuantities[iItems] = WFragment(kBalance.iNumItems);
                    }
                }
                ++ iItems;
                // [Loop Continue]
                goto J0x3FB;
            }
        }
        ++ iBalanceTech;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

function BuildAltTech(int iTech, int iHours, optional bool bCustomReqs, optional XComGame.XGGameData.EItemType eItemReq, optional XComGame.XGGameData.ETechType eTechReq, optional int iImage, optional XComGame.XGGameData.EResearchCredits eCreditGranted)
{
    local TTech kTech;

    eCreditGranted = 0;
    // End:0x4F
    if(ISCONTROLLED())
    {
        // End:0x4F
        if((iTech == 9) || iTech == 10)
        {
            iHours /= float(2);
        }
    }
    kTech.strName = altTechTypeNames[iTech];
    kTech.iTech = iTech;
    kTech.iHours = iHours;
    kTech.bCustomReqs = bCustomReqs;
    kTech.iItemReq = eItemReq;
    kTech.iTechReq = eTechReq;
    kTech.iImage = iTech;
    kTech.eCreditGranted = eCreditGranted;
    kTech.strSummary = GetAltBriefSummary(iTech, kTech.strReport, kTech.strCustom, kTech.kCost, kTech.strCodename);
    m_arrTechs[iTech] = kTech;
    //return;    
}

function BalanceAltFoundry()
{
    local int iBalanceTech;
    local TAltFoundryBalance kBalance;
    local int iItems;

    iBalanceTech = 0;
    J0x0B:
    LogInternal("altFoundryBalance.Length=" $ string(altFoundryBalance.Length));
    // End:0x98A
    if(iBalanceTech < altFoundryBalance.Length)
    {
        LogInternal("iBalanceTech=" $ string(iBalanceTech));
        LogInternal("altFoundryBalance.Length=" $ string(altFoundryBalance.Length));
        kBalance = altFoundryBalance[iBalanceTech];
        // End:0x97C
        if(kBalance.eFTech > 0)
        {
            LogInternal("iBalanceTech=" $ string(iBalanceTech));
            LogInternal("kBalance.eFTech=" $ string(kBalance.eFTech));
            m_arrFoundryTechs[kBalance.eFTech].iHours = FoundryDaysToHours(kBalance.iTime, kBalance.iEngineers);
            m_arrFoundryTechs[kBalance.eFTech].iCash = kBalance.iCash;
            m_arrFoundryTechs[kBalance.eFTech].iElerium = kBalance.iElerium;
            m_arrFoundryTechs[kBalance.eFTech].iAlloys = kBalance.iAlloys;
            m_arrFoundryTechs[kBalance.eFTech].iEngineers = kBalance.iEngineers;
            m_arrFoundryTechs[kBalance.eFTech].iTechReq = kBalance.eReqTech;
            m_arrFoundryTechs[kBalance.eFTech].iItemReq = kBalance.eReqItem;
            iItems = 0;
            // End:0x4CB
            if((kBalance.iFragments % 1000) > 0)
            {
                m_arrFoundryTechs[kBalance.eFTech].kCost.arrItems.AddItem(163);
                m_arrFoundryTechs[kBalance.eFTech].kCost.arrItemQuantities.AddItem(WFragment(kBalance.iFragments % 1000));
            }
            // End:0x5BD
            if((kBalance.iFragments / 1000) > 0)
            {
                m_arrFoundryTechs[kBalance.eFTech].kCost.arrItems.AddItem(164);
                m_arrFoundryTechs[kBalance.eFTech].kCost.arrItemQuantities.AddItem(kBalance.iFragments / 1000);
            }
            // End:0x6CC
            if(kBalance.eReqItem > 0)
            {
                m_arrFoundryTechs[kBalance.eFTech].kCost.arrItems.AddItem(kBalance.eReqItem);
                m_arrFoundryTechs[kBalance.eFTech].kCost.arrItemQuantities.AddItem(WFragment(kBalance.iNumItems));
            }
            J0x6CC:
            // End:0x97C [Loop If]
            if(iItems < m_arrFoundryTechs[kBalance.eFTech].kCost.arrItems.Length)
            {
                // End:0x811
                if(m_arrFoundryTechs[kBalance.eFTech].kCost.arrItems[iItems] == 163)
                {
                    m_arrFoundryTechs[kBalance.eFTech].kCost.arrItemQuantities[iItems] = WFragment(kBalance.iFragments % 1000);
                }
                // End:0x96E
                else
                {
                    // End:0x8EF
                    if(m_arrFoundryTechs[kBalance.eFTech].kCost.arrItems[iItems] == 164)
                    {
                        m_arrFoundryTechs[kBalance.eFTech].kCost.arrItemQuantities[iItems] = kBalance.iFragments / 1000;
                    }
                    // End:0x96E
                    else
                    {
                        m_arrFoundryTechs[kBalance.eFTech].kCost.arrItemQuantities[iItems] = WFragment(kBalance.iNumItems);
                    }
                }
                ++ iItems;
                // [Loop Continue]
                goto J0x6CC;
            }
        }
        ++ iBalanceTech;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

function BuildAltFoundryTech(XComGame.XGGameData.EFoundryTech eTech, int iDays, int iEngineers, optional int iCash, optional int iElerium, optional int iAlloys, optional XComGame.XGGameData.ETechType iTechReq, optional XComGame.XGGameData.EItemType eItemReq, optional int iImage)
{
    local TFoundryTech kTech;

    kTech.strName = FoundryTechNames[eTech];
    kTech.iFoundryTech = eTech;
    kTech.iHours = FoundryDaysToHours(iDays, iEngineers);
    kTech.iCash = iCash;
    kTech.iEngineers = iEngineers;
    kTech.iElerium = iElerium;
    kTech.iAlloys = iAlloys;
    kTech.iTechReq = iTechReq;
    kTech.iItemReq = eItemReq;
    kTech.iImage = eTech;
    kTech.strSummary = FoundryTechSummary[eTech];
    BuildFoundryItemCost(eTech, kTech);
    m_arrFoundryTechs[eTech] = kTech;
    //return;    
}

function FoundryAdjustments()
{
    //return;    
}