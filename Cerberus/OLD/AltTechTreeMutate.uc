/*******************************************************************************
 * AltTechTreeMutate generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AltTechTreeMutate extends XComMutator
    config(AltTree)
    hidecategories(Navigation,Movement,Collision,Navigation);

enum EWeaponSort
{
    eWeaponSort_None,
    eWeaponSort_Ballistic,
    eWeaponSort_Beam,
    eWeaponSort_Gauss,
    eWeaponSort_Pulse,
    eWeaponSort_Fusion,
    eWeaponSort_EMP,
    eWeaponSort_Plasma,
    eWeaponSort_MAX
};

enum EArmorSort
{
    eArmorSort_None,
    eArmorSort_Light,
    eArmorSort_Medium,
    eArmorSort_Heavy,
    eArmorSort_MECArmor,
    eArmorSort_SHIVArmor,
    eArmorSort_MAX
};

struct native TAltWeapon
{
    var string strName;
    var int iType;
    var int aAbilities[EAbility];
    var int aProperties[EWeaponProperty];
    var int iDamage;
    var int iEnvironmentDamage;
    var int iRange;
    var int iReactionRange;
    var int iReactionAngle;
    var int iRadius;
    var int iCritical;
    var int iOffenseBonus;
    var int iSuppression;
    var int iSize;
    var int iHPBonus;
    var int iWillBonus;

    structdefaultproperties
    {
        strName=""
        iType=0
        aAbilities[0]=0
        aAbilities[1]=0
        aAbilities[2]=0
        aAbilities[3]=0
        aAbilities[4]=0
        aAbilities[5]=0
        aAbilities[6]=0
        aAbilities[7]=0
        aAbilities[8]=0
        aAbilities[9]=0
        aAbilities[10]=0
        aAbilities[11]=0
        aAbilities[12]=0
        aAbilities[13]=0
        aAbilities[14]=0
        aAbilities[15]=0
        aAbilities[16]=0
        aAbilities[17]=0
        aAbilities[18]=0
        aAbilities[19]=0
        aAbilities[20]=0
        aAbilities[21]=0
        aAbilities[22]=0
        aAbilities[23]=0
        aAbilities[24]=0
        aAbilities[25]=0
        aAbilities[26]=0
        aAbilities[27]=0
        aAbilities[28]=0
        aAbilities[29]=0
        aAbilities[30]=0
        aAbilities[31]=0
        aAbilities[32]=0
        aAbilities[33]=0
        aAbilities[34]=0
        aAbilities[35]=0
        aAbilities[36]=0
        aAbilities[37]=0
        aAbilities[38]=0
        aAbilities[39]=0
        aAbilities[40]=0
        aAbilities[41]=0
        aAbilities[42]=0
        aAbilities[43]=0
        aAbilities[44]=0
        aAbilities[45]=0
        aAbilities[46]=0
        aAbilities[47]=0
        aAbilities[48]=0
        aAbilities[49]=0
        aAbilities[50]=0
        aAbilities[51]=0
        aAbilities[52]=0
        aAbilities[53]=0
        aAbilities[54]=0
        aAbilities[55]=0
        aAbilities[56]=0
        aAbilities[57]=0
        aAbilities[58]=0
        aAbilities[59]=0
        aAbilities[60]=0
        aAbilities[61]=0
        aAbilities[62]=0
        aAbilities[63]=0
        aAbilities[64]=0
        aAbilities[65]=0
        aAbilities[66]=0
        aAbilities[67]=0
        aAbilities[68]=0
        aAbilities[69]=0
        aAbilities[70]=0
        aAbilities[71]=0
        aAbilities[72]=0
        aAbilities[73]=0
        aAbilities[74]=0
        aAbilities[75]=0
        aAbilities[76]=0
        aAbilities[77]=0
        aAbilities[78]=0
        aAbilities[79]=0
        aAbilities[80]=0
        aAbilities[81]=0
        aAbilities[82]=0
        aAbilities[83]=0
        aAbilities[84]=0
        aAbilities[85]=0
        aAbilities[86]=0
        aAbilities[87]=0
        aAbilities[88]=0
        aAbilities[89]=0
        aAbilities[90]=0
        aAbilities[91]=0
        aAbilities[92]=0
        aAbilities[93]=0
        aAbilities[94]=0
        aAbilities[95]=0
        aProperties[0]=0
        aProperties[1]=0
        aProperties[2]=0
        aProperties[3]=0
        aProperties[4]=0
        aProperties[5]=0
        aProperties[6]=0
        aProperties[7]=0
        aProperties[8]=0
        aProperties[9]=0
        aProperties[10]=0
        aProperties[11]=0
        aProperties[12]=0
        aProperties[13]=0
        aProperties[14]=0
        aProperties[15]=0
        aProperties[16]=0
        aProperties[17]=0
        aProperties[18]=0
        aProperties[19]=0
        aProperties[20]=0
        iDamage=0
        iEnvironmentDamage=0
        iRange=0
        iReactionRange=0
        iReactionAngle=0
        iRadius=0
        iCritical=0
        iOffenseBonus=0
        iSuppression=0
        iSize=0
        iHPBonus=0
        iWillBonus=0
    }
};

struct TWeaponMods
{
    var AltTechTreeMutate.EWeaponSort EWeaponSort;
    var bool bApplied;
    var int eTech;
    var int eFTech;
    var int iDamage;
    var int iAim;
    var int iCritical;
    var int iRange;
    var int iAmmo;

    structdefaultproperties
    {
        EWeaponSort=EWeaponSort.eWeaponSort_None
        bApplied=false
        eTech=0
        eFTech=0
        iDamage=0
        iAim=0
        iCritical=0
        iRange=0
        iAmmo=0
    }
};

struct TArmorMods
{
    var AltTechTreeMutate.EArmorSort EArmorSort;
    var bool bApplied;
    var int eTech;
    var int eFTech;
    var int iHPBonus;
    var int iDefenseBonus;
    var int iMobilityBonus;

    structdefaultproperties
    {
        EArmorSort=EArmorSort.eArmorSort_None
        bApplied=false
        eTech=0
        eFTech=0
        iHPBonus=0
        iDefenseBonus=0
        iMobilityBonus=0
    }
};

var config array<config XComGame.XGGameData.EItemType> ballisticWeapons;
var config array<config XComGame.XGGameData.EItemType> beamWeapons;
var config array<config XComGame.XGGameData.EItemType> gaussWeapons;
var config array<config XComGame.XGGameData.EItemType> pulseWeapons;
var config array<config XComGame.XGGameData.EItemType> fusionWeapons;
var config array<config XComGame.XGGameData.EItemType> empWeapons;
var config array<config XComGame.XGGameData.EItemType> plasmaWeapons;
var config array<config XComGame.XGGameData.EItemType> lightArmor;
var config array<config XComGame.XGGameData.EItemType> mediumArmor;
var config array<config XComGame.XGGameData.EItemType> heavyArmor;
var config array<config XComGame.XGGameData.EItemType> MECArmor;
var config array<config XComGame.XGGameData.EItemType> SHIVArmor;
var config array<config TWeaponMods> weaponMods;
var config array<config TArmorMods> armorMods;
var AltTechTree m_kAltTree;
var AltItemTree m_kAltItems;
var UIItemCards m_kItemCard;
var protected UIInterfaceMgr m_kHUD;
var array<TAltWeapon> m_arrAltWeapons;

function AltTechTree AltTree()
{
    return m_kAltTree;
    //return ReturnValue;    
}

function XGTechTree TECHTREE()
{
    LogInternal("This Is Alright");
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().GetLabs().m_kTree;
    //return ReturnValue;    
}

function XGFacility_Labs LABS()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().m_kLabs;
    //return ReturnValue;    
}

function XGFacility_Engineering ENGINEERING()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().m_kEngineering;
    //return ReturnValue;    
}

function XGStorage STORAGE()
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().GetHQ().m_kEngineering.GetStorage();
    //return ReturnValue;    
}

function XGTacticalGameCore theGameCore()
{
    return XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore;
    //return ReturnValue;    
}

function bool IsOptionEnabled(XComGame.XGGameData.EGameplayOption eOption)
{
    return XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game).GetGameCore().m_arrSecondWave[eOption] > 0;
    //return ReturnValue;    
}

simulated function UIInterfaceMgr GetHUD()
{
    return m_kHUD;
    //return ReturnValue;    
}

function Mutate(string MutateString, PlayerController Sender)
{
    local XGFacility_Labs iLab;
    local XGFacility_Engineering iItem;

    LogInternal("This is 1");
    // End:0xA8
    if(MutateString == "XGFacility_Labs.Init")
    {
        m_kAltTree = Spawn(class'AltTechTree');
        // End:0xA7
        foreach AllActors(class'XGFacility_Labs', iLab)
        {
            LogInternal("This is Fun");
            iLab.m_kTree = m_kAltTree;            
        }        
    }
    // End:0x14D
    if(MutateString == "XGFacility_Engineering.Init")
    {
        m_kAltItems = Spawn(class'AltItemTree');
        // End:0x14C
        foreach AllActors(class'XGFacility_Engineering', iItem)
        {
            LogInternal("This is Success");
            iItem.m_kItems = m_kAltItems;            
        }        
    }
    super.Mutate(MutateString, Sender);
    //return;    
}

function HeadQuartersInitNewGame(PlayerController Sender)
{
    LogInternal("This is 2");
    // End:0x44
    if(IsOptionEnabled(30))
    {
        LogInternal("This is New");
        BuildWeaponMods();
        BuildArmorMods();
    }
    // End:0x46
    else
    {
        return;
    }
    //return;    
}

function PostLoadSaveGame(PlayerController Sender)
{
    LogInternal("This is 2");
    // End:0x49
    if(IsOptionEnabled(30))
    {
        LogInternal("This is New Also");
        BuildWeaponMods();
        BuildArmorMods();
    }
    // End:0x4B
    else
    {
        return;
    }
    //return;    
}

function BuildWeaponMods()
{
    local int iWeaponMods, iItem;
    local TWeapon kWeapon;

    LogInternal("This is Tough");
    iWeaponMods = 0;
    J0x1D:
    // End:0x184A [Loop If]
    if(iWeaponMods < weaponMods.Length)
    {
        LogInternal("This is 4");
        // End:0x183C
        if(!weaponMods[iWeaponMods].bApplied && ((weaponMods[iWeaponMods].eTech == 0) || LABS().IsResearched(weaponMods[iWeaponMods].eTech)) && (weaponMods[iWeaponMods].eFTech == 0) || ENGINEERING().IsFoundryTechResearched(weaponMods[iWeaponMods].eFTech))
        {
            LogInternal("ballisticWeapons.Length=" $ string(ballisticWeapons.Length));
            switch(weaponMods[iWeaponMods].EWeaponSort)
            {
                // End:0x4F6
                case 1:
                    iItem = 0;
                    J0x1CC:
                    // End:0x4CA [Loop If]
                    if(iItem < ballisticWeapons.Length)
                    {
                        LogInternal("This is Ballistic");
                        kWeapon = theGameCore().m_arrWeapons[ballisticWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[ballisticWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x1CC;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0x82B
                case 2:
                    iItem = 0;
                    J0x506:
                    // End:0x7FF [Loop If]
                    if(iItem < beamWeapons.Length)
                    {
                        LogInternal("This is Beam");
                        kWeapon = theGameCore().m_arrWeapons[beamWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[beamWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x506;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0xB61
                case 3:
                    iItem = 0;
                    J0x83B:
                    // End:0xB35 [Loop If]
                    if(iItem < gaussWeapons.Length)
                    {
                        LogInternal("This is Gauss");
                        kWeapon = theGameCore().m_arrWeapons[gaussWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[gaussWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x83B;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0xE97
                case 4:
                    iItem = 0;
                    J0xB71:
                    // End:0xE6B [Loop If]
                    if(iItem < pulseWeapons.Length)
                    {
                        LogInternal("This is Pulse");
                        kWeapon = theGameCore().m_arrWeapons[pulseWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[pulseWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0xB71;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0x11CE
                case 5:
                    iItem = 0;
                    J0xEA7:
                    // End:0x11A2 [Loop If]
                    if(iItem < fusionWeapons.Length)
                    {
                        LogInternal("This is Fusion");
                        kWeapon = theGameCore().m_arrWeapons[fusionWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[fusionWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0xEA7;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0x1502
                case 6:
                    iItem = 0;
                    J0x11DE:
                    // End:0x14D6 [Loop If]
                    if(iItem < empWeapons.Length)
                    {
                        LogInternal("This is EMP");
                        kWeapon = theGameCore().m_arrWeapons[empWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[empWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x11DE;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0x1839
                case 7:
                    iItem = 0;
                    J0x1512:
                    // End:0x180D [Loop If]
                    if(iItem < plasmaWeapons.Length)
                    {
                        LogInternal("This is Plasma");
                        kWeapon = theGameCore().m_arrWeapons[plasmaWeapons[iItem]];
                        kWeapon.iDamage += weaponMods[iWeaponMods].iDamage;
                        kWeapon.iOffenseBonus += weaponMods[iWeaponMods].iAim;
                        kWeapon.iCritical += weaponMods[iWeaponMods].iCritical;
                        kWeapon.iRange += weaponMods[iWeaponMods].iRange;
                        kWeapon.iSuppression += weaponMods[iWeaponMods].iAmmo;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("Damage=" $ string(kWeapon.iDamage));
                        LogInternal("Aim=" $ string(kWeapon.iOffenseBonus));
                        LogInternal("Critical=" $ string(kWeapon.iCritical));
                        LogInternal("Range=" $ string(kWeapon.iRange));
                        LogInternal("Ammo=" $ string(kWeapon.iSuppression));
                        theGameCore().m_arrWeapons[plasmaWeapons[iItem]] = kWeapon;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x1512;
                    }
                    weaponMods[iWeaponMods].bApplied = true;
                    // End:0x183C
                    break;
                // End:0xFFFF
                default:
                }
                ++ iWeaponMods;
                // [Loop Continue]
                goto J0x1D;
            }
            //return;            
}

function BuildArmorMods()
{
    local int iArmorMods, iItem;
    local TArmor kArmor;

    iArmorMods = 0;
    J0x0B:
    // End:0xD60 [Loop If]
    if(iArmorMods < armorMods.Length)
    {
        // End:0xD52
        if(!armorMods[iArmorMods].bApplied && ((armorMods[iArmorMods].eTech == 0) || LABS().IsResearched(armorMods[iArmorMods].eTech)) && (armorMods[iArmorMods].eFTech == 0) || ENGINEERING().IsFoundryTechResearched(armorMods[iArmorMods].eFTech))
        {
            switch(armorMods[iArmorMods].EArmorSort)
            {
                // End:0x3D1
                case 1:
                    iItem = 0;
                    J0x181:
                    // End:0x3A5 [Loop If]
                    if(iItem < lightArmor.Length)
                    {
                        LogInternal("This is Light");
                        kArmor = theGameCore().m_arrArmors[lightArmor[iItem]];
                        kArmor.iHPBonus += armorMods[iArmorMods].iHPBonus;
                        kArmor.iDefenseBonus += armorMods[iArmorMods].iDefenseBonus;
                        kArmor.iMobilityBonus += armorMods[iArmorMods].iMobilityBonus;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("HPBonus=" $ string(kArmor.iHPBonus));
                        LogInternal("DefenseB=" $ string(kArmor.iDefenseBonus));
                        LogInternal("MobilityB=" $ string(kArmor.iMobilityBonus));
                        theGameCore().m_arrArmors[lightArmor[iItem]] = kArmor;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x181;
                    }
                    armorMods[iArmorMods].bApplied = true;
                    // End:0xD52
                    break;
                // End:0x632
                case 2:
                    iItem = 0;
                    J0x3E1:
                    // End:0x606 [Loop If]
                    if(iItem < mediumArmor.Length)
                    {
                        LogInternal("This is Medium");
                        kArmor = theGameCore().m_arrArmors[mediumArmor[iItem]];
                        kArmor.iHPBonus += armorMods[iArmorMods].iHPBonus;
                        kArmor.iDefenseBonus += armorMods[iArmorMods].iDefenseBonus;
                        kArmor.iMobilityBonus += armorMods[iArmorMods].iMobilityBonus;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("HPBonus=" $ string(kArmor.iHPBonus));
                        LogInternal("DefenseB=" $ string(kArmor.iDefenseBonus));
                        LogInternal("MobilityB=" $ string(kArmor.iMobilityBonus));
                        theGameCore().m_arrArmors[mediumArmor[iItem]] = kArmor;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x3E1;
                    }
                    armorMods[iArmorMods].bApplied = true;
                    // End:0xD52
                    break;
                // End:0x892
                case 3:
                    iItem = 0;
                    J0x642:
                    // End:0x866 [Loop If]
                    if(iItem < heavyArmor.Length)
                    {
                        LogInternal("This is Heavy");
                        kArmor = theGameCore().m_arrArmors[heavyArmor[iItem]];
                        kArmor.iHPBonus += armorMods[iArmorMods].iHPBonus;
                        kArmor.iDefenseBonus += armorMods[iArmorMods].iDefenseBonus;
                        kArmor.iMobilityBonus += armorMods[iArmorMods].iMobilityBonus;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("HPBonus=" $ string(kArmor.iHPBonus));
                        LogInternal("DefenseB=" $ string(kArmor.iDefenseBonus));
                        LogInternal("MobilityB=" $ string(kArmor.iMobilityBonus));
                        theGameCore().m_arrArmors[heavyArmor[iItem]] = kArmor;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x642;
                    }
                    armorMods[iArmorMods].bApplied = true;
                    // End:0xD52
                    break;
                // End:0xAF0
                case 4:
                    iItem = 0;
                    J0x8A2:
                    // End:0xAC4 [Loop If]
                    if(iItem < MECArmor.Length)
                    {
                        LogInternal("This is MEC");
                        kArmor = theGameCore().m_arrArmors[MECArmor[iItem]];
                        kArmor.iHPBonus += armorMods[iArmorMods].iHPBonus;
                        kArmor.iDefenseBonus += armorMods[iArmorMods].iDefenseBonus;
                        kArmor.iMobilityBonus += armorMods[iArmorMods].iMobilityBonus;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("HPBonus=" $ string(kArmor.iHPBonus));
                        LogInternal("DefenseB=" $ string(kArmor.iDefenseBonus));
                        LogInternal("MobilityB=" $ string(kArmor.iMobilityBonus));
                        theGameCore().m_arrArmors[MECArmor[iItem]] = kArmor;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0x8A2;
                    }
                    armorMods[iArmorMods].bApplied = true;
                    // End:0xD52
                    break;
                // End:0xD4F
                case 5:
                    iItem = 0;
                    J0xB00:
                    // End:0xD23 [Loop If]
                    if(iItem < SHIVArmor.Length)
                    {
                        LogInternal("This is SHIV");
                        kArmor = theGameCore().m_arrArmors[SHIVArmor[iItem]];
                        kArmor.iHPBonus += armorMods[iArmorMods].iHPBonus;
                        kArmor.iDefenseBonus += armorMods[iArmorMods].iDefenseBonus;
                        kArmor.iMobilityBonus += armorMods[iArmorMods].iMobilityBonus;
                        LogInternal("iItem=" $ string(iItem));
                        LogInternal("HPBonus=" $ string(kArmor.iHPBonus));
                        LogInternal("DefenseB=" $ string(kArmor.iDefenseBonus));
                        LogInternal("MobilityB=" $ string(kArmor.iMobilityBonus));
                        theGameCore().m_arrArmors[SHIVArmor[iItem]] = kArmor;
                        ++ iItem;
                        // [Loop Continue]
                        goto J0xB00;
                    }
                    armorMods[iArmorMods].bApplied = true;
                    // End:0xD52
                    break;
                // End:0xFFFF
                default:
                }
                ++ iArmorMods;
                // [Loop Continue]
                goto J0x0B;
            }
            //return;            
}

defaultproperties
{
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__AltTechTreeMutate.Sprite'
    Components(0)=Sprite
}
